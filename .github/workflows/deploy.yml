name: Provision, Build & Deploy  # My CI/CD name

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/team-task:latest

jobs:
  provision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      ec2_ip: ${{ steps.output_ip.outputs.ec2_ip }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform Init, Plan & Apply
        working-directory: ./infra/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Get EC2 IP
        id: output_ip
        working-directory: ./infra/terraform
        run: echo "ec2_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: provision
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build, provision]
    steps:
      - uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.provision.outputs.ec2_ip }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail
            sudo mkdir -p /opt/team-task

            # Create runtime .env file for the container
            cat <<EOF | sudo tee /opt/team-task/.env > /dev/null
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            PORT=3000
            EOF
            sudo chmod 600 /opt/team-task/.env

            # Deploy latest image
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            sudo docker pull ${{ env.IMAGE_NAME }}
            sudo docker rm -f team-task || true
            sudo docker run -d --name team-task --restart unless-stopped --env-file /opt/team-task/.env -p 80:3000 ${{ env.IMAGE_NAME }}

            # Health check
            sleep 10
            curl -f http://localhost:80/api/healthz || (echo "Health check failed!" && exit 1)

